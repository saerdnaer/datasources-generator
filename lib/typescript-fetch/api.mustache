// tslint:disable
// @ts-nocheck
{{>licenseInfo}}

import { UserInputError } from "apollo-server";
import { RESTDataSource } from "apollo-datasource-rest";

import { Configuration } from "./configuration";
import "./types";
// {$CustomDataSourcePlaceholder}

const BASE_PATH = "{{{basePath}}}".replace(/\/+$/, "");

{{#apiInfo}}{{#apis}}{{#operations}}

export class {{classname}}Api extends RESTDataSource {
    constructor(baseUrl?: string) {
        super();
        this.baseURL = "{{{basePath}}}";
    }
    {{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
     {{/allParams}}
     * @param {*} [options] Override http request option.
     * @throws {UserInputError}
     */
    {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}): Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Response{{/returnType}}> {
    {{#allParams}}
    {{#required}}
        // verify required parameter '{{paramName}}' is not null or undefined
        if (!{{paramName}}) {
            throw new UserInputError('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }
    {{/required}}
    {{/allParams}}
        return this.{{httpMethod}}(`{{{path}}}`, { {{#queryParams}}{{paramName}}, {{/queryParams}} });
    }
    {{/operation}}
};

/**
 * {{classname}} - object-oriented interface{{#description}}
 * {{{description}}}{{/description}}
 * @export
 * @class {{classname}}
 * @extends {BaseAPI}
 */
{{#withInterfaces}}
export class {{classname}} extends BaseAPI implements {{classname}}Interface {
{{/withInterfaces}}

{{/operations}}{{/apis}}{{/apiInfo}}
