// tslint:disable
// @ts-nocheck
{{>licenseInfo}}

import { UserInputError } from "apollo-server";
import { RESTDataSource } from "apollo-datasource-rest";

import { Configuration } from "./configuration";
import "./types";
// {$CustomDataSourcePlaceholder}

const BASE_PATH = "{{{basePath}}}".replace(/\/+$/, "");

{{#apiInfo}}{{#apis}}{{#operations}}

export class {{classname}}Api extends RESTDataSource {
    constructor(baseUrl?: string) {
        super();
        this.baseURL = "{{{basePath}}}";
    }
    {{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
     {{/allParams}}
     * @param {*} [options] Override http request option.
     * @throws {UserInputError}
     */
    {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}): Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Response{{/returnType}}> {
    {{#allParams}}
    {{#required}}
        // verify required parameter '{{paramName}}' is not null or undefined
        if (!{{paramName}}) {
            throw new UserInputError('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }
    {{/required}}
    {{/allParams}}
        const params = {};
    {{#authMethods}}
        // authentication {{name}} required
        {{#isApiKey}}
        {{#isKeyInHeader}}
        if (configuration && configuration.apiKey) {
            const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                ? configuration.apiKey("{{keyParamName}}")
                : configuration.apiKey;
            localVarHeaderParameter["{{keyParamName}}"] = localVarApiKeyValue;
        }
        {{/isKeyInHeader}}
        {{#isKeyInQuery}}
        if (configuration && configuration.apiKey) {
            const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                ? configuration.apiKey("{{keyParamName}}")
                : configuration.apiKey;
            params["{{keyParamName}}"] = localVarApiKeyValue;
        }
        {{/isKeyInQuery}}
        {{/isApiKey}}
        {{#isBasic}}
        // http basic authentication required
        if (configuration && (configuration.username || configuration.password)) {
            localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
        }
        {{/isBasic}}
        {{#isOAuth}}
        // oauth required
        if (configuration && configuration.accessToken) {
            const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                ? configuration.accessToken("{{name}}", [{{#scopes}}"{{{scope}}}"{{^@last}}, {{/@last}}{{/scopes}}])
                : configuration.accessToken;
            localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
        }
        {{/isOAuth}}
    {{/authMethods}}
    {{#queryParams}}
        {{#isListContainer}}
        if ({{paramName}}) {
        {{#isCollectionFormatMulti}}
            params['{{baseName}}'] = {{paramName}};
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
            params['{{baseName}}'] = {{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]);
        {{/isCollectionFormatMulti}}
        }
        {{/isListContainer}}
        {{^isListContainer}}
        if ({{paramName}} !== undefined) {
            {{#isDateTime}}
            params['{{baseName}}'] = ({{paramName}} as any).toISOString();
            {{/isDateTime}}
            {{^isDateTime}}
            {{#isDate}}
            params['{{baseName}}'] = ({{paramName}} as any).toISOString();
            {{/isDate}}
            {{^isDate}}
            params['{{baseName}}'] = {{paramName}};
            {{/isDate}}
            {{/isDateTime}}
        }
        {{/isListContainer}}
    {{/queryParams}}
    {{#headerParams}}
            {{#isListContainer}}
            if ({{paramName}}) {
                localVarHeaderParameter['{{baseName}}'] = {{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]));
            }
            {{/isListContainer}}
            {{^isListContainer}}
            if ({{paramName}} !== undefined && {{paramName}} !== null) {
                localVarHeaderParameter['{{baseName}}'] = String({{paramName}});
            }
            {{/isListContainer}}

    {{/headerParams}}
    {{#formParams}}
            {{#isListContainer}}
            if ({{paramName}}) {
            {{#isCollectionFormatMulti}}
                {{paramName}}.forEach((element) => {
                    localVarFormParams.append('{{baseName}}', element as any);
                })
            {{/isCollectionFormatMulti}}
            {{^isCollectionFormatMulti}}
                    localVarFormParams.set('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]));
            {{/isCollectionFormatMulti}}
            }
            {{/isListContainer}}
            {{^isListContainer}}
            if ({{paramName}} !== undefined) {
                localVarFormParams.set('{{baseName}}', {{paramName}} as any);
            }
            {{/isListContainer}}

    {{/formParams}}
    {{#hasFormParams}}
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

    {{/hasFormParams}}
        return this.{{httpMethod}}(`{{{path}}}`, params, requestOptions || {});
    }
    {{/operation}}
};

/**
 * {{classname}} - object-oriented interface{{#description}}
 * {{{description}}}{{/description}}
 * @export
 * @class {{classname}}
 * @extends {BaseAPI}
 */
{{#withInterfaces}}
export class {{classname}} extends BaseAPI implements {{classname}}Interface {
{{/withInterfaces}}

{{/operations}}{{/apis}}{{/apiInfo}}
